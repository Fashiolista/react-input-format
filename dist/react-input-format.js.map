{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 269ac3d97b5343db0190","webpack:///./react-input-format.js","webpack:///./formatters/percentage.js","webpack:///./formatters/thousand-separated.js","webpack:///external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}"],"names":["ReactInputFormat","props","state","Object","assign","type","format","value","String","defaultValue","formattedValue","availableFormatters","setFormatter","formatters","PercentageFilter","console","warn","formatter","formatterProps","setState","e","deFormat","target","getProps","onChange","changeEvent","originalEvent","refreshFormattedValue","keyCode","bind","onBlur","onKeyDown","React","Component","propTypes","PropTypes","string","isRequired","number","object","func","module","exports","formatOnBlur","input","parseFloat","isNaN","factorDiv","toFixed","decimals","parts","deFormatParts","determineDecimals","factorMulti","parseInt","match","replace","split","Math","min","length","factor","join"],"mappings":"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","file":"react-input-format.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-input-format\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"react-input-format\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmory imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmory exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tObject.defineProperty(exports, name, {\n \t\t\tconfigurable: false,\n \t\t\tenumerable: true,\n \t\t\tget: getter\n \t\t});\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 269ac3d97b5343db0190","import React from 'react';\n\nimport ThousandSeparatedFilter from './formatters/thousand-separated';\nimport PercentageFilter from './formatters/percentage';\n\n\n/**\n * React Input Format Component\n *\n * Takes a normal input box and formats the user's input based on the specified formatter.\n *\n * Currently supports:\n *\n * - Thousand Separator\n *   >> 10000\n *   << 10,000\n *\n *   >> 10000000.00\n *   << 10,000,000.00\n *\n * - Percentage\n *   >> 1\n *   << 1%\n *\n *   With 0.01 factor, value returned by onChange is 0.042\n *   >> 4.2\n *   << 4.2%\n *\n *\n * @type {ReactInputFormat}\n */\nclass ReactInputFormat extends React.Component {\n\n    /**\n     * Constructor\n     *\n     * @param props\n     */\n    constructor (props) {\n        super();\n\n        this.state = Object.assign({\n            type: 'text',\n            format: 'thousand-separated',\n            value: String(props.defaultValue) || '',\n            formattedValue: '',\n        }, props);\n    }\n\n    /**\n     * React component mounted\n     */\n    componentDidMount () {\n        this.availableFormatters();\n        this.setFormatter();\n    }\n\n    /**\n     * Set available formatters\n     */\n    availableFormatters () {\n        this.formatters = {\n            'thousand-separated': ThousandSeparatedFilter,\n            'percentage': PercentageFilter,\n        }\n    }\n\n    /**\n     * Set formatter, based on user props\n     */\n    setFormatter () {\n        if (!this.formatters[this.state.format]) {\n            return console.warn(`Formatter \"${this.state.format}\" not found`);\n        }\n\n        this.formatter = new this.formatters[this.state.format](this.props.formatterProps);\n\n        this.setState({\n            formattedValue: this.formatter.format(this.state.value)\n        });\n    }\n\n    /**\n     * On change callback\n     *\n     * @param e\n     */\n    onChange (e) {\n        this.state.value = this.formatter.deFormat(e.target.value);\n\n        if (!this.formatter.getProps()['formatOnBlur']) {\n            this.state.formattedValue = this.formatter.format(this.state.value);\n        } else {\n            this.state.formattedValue = e.target.value;\n        }\n\n        this.setState(this.state);\n\n        this.props.onChange && this.props.onChange(this.changeEvent(e));\n    }\n\n    /**\n     * Make our own change event\n     *\n     * @param e\n     * @returns {{value: *, originalEvent: *}}\n     */\n    changeEvent (e) {\n        return {\n            value: this.state.value,\n            originalEvent: e,\n        };\n    }\n\n    /**\n     * On blur, might want to reformat\n     */\n    onBlur () {\n        if (this.formatter.getProps()['formatOnBlur']) {\n            this.refreshFormattedValue();\n        }\n    }\n\n    /**\n     * On enter, reformat\n     * @param e\n     */\n    onKeyDown (e) {\n        if (e.keyCode === 13) {\n            this.refreshFormattedValue();\n        }\n    }\n\n    /**\n     * Refresh formatted value based on internal value\n     */\n    refreshFormattedValue () {\n        this.state.formattedValue = this.formatter.format(this.state.value);\n\n        this.setState(this.state);\n    }\n\n    /**\n     * Render\n     *\n     * @returns {XML}\n     */\n    render () {\n        return (\n            <div className=\"react-input-format\">\n                <input type={this.state.type} value={this.state.formattedValue} onChange={this.onChange.bind(this)} onBlur={this.onBlur.bind(this)} onKeyDown={this.onKeyDown.bind(this)} />\n            </div>\n        );\n    }\n};\n\n// format=\"percentage\" defaultValue={0} formatterProps={{factor: 0.01, decimals: 0}} onChange={e => {console.log(\"Updated with\", e.value)}}\n\n/**\n * Proptypes\n */\nReactInputFormat.propTypes = {\n    format: React.PropTypes.string.isRequired,\n    defaultValue: React.PropTypes.number,\n    formatterProps: React.PropTypes.object,\n    onChange: React.PropTypes.func\n};\n\n\nmodule.exports = ReactInputFormat;\n\n\n// WEBPACK FOOTER //\n// ./react-input-format.js","/**\n * Thousand separated formatter\n */\nexport default class {\n\n    /**\n     * Constructor\n     *\n     * @param props\n     */\n    constructor (props = {}) {\n        this.props = props;\n    }\n\n    /**\n     * Return properties specific for this formatter\n     *\n     * @returns {{formatOnBlur: boolean}}\n     */\n    getProps () {\n        return {\n            formatOnBlur: true\n        }\n    }\n\n    /**\n     * Format string\n     *\n     * @param input\n     * @returns {string}\n     */\n    format (input = '') {\n        input = parseFloat(input || 0);\n\n        if (isNaN(input)) {\n            return '%';\n        }\n\n        return this.factorDiv(input).toFixed(this.props.decimals) + \"%\";\n    }\n\n    /**\n     * Deformat formatted text back to computer readable\n     *\n     * @param input\n     * @returns {string}\n     */\n    deFormat (input = '') {\n        const parts = this.deFormatParts(input);\n\n        if (parts && parts[0] === '%') {\n            return '';\n        }\n\n        this.determineDecimals(input);\n\n        if (parts) {\n            return parseFloat(\n                this.factorMulti(parts[0])\n                    .toFixed(2 + parseInt(this.props.decimals))\n            );\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Use regex to divide input into parts\n     *\n     * @param input\n     * @returns {Array|{index: number, input: string}|*}\n     */\n    deFormatParts (input) {\n        const format = /^([0-9]*\\.?\\d{0,2})%?/g;\n\n        return input.match(format);\n    }\n\n    /**\n     * Based on input, see if the user is using a decimal number, if so, we update our decimal property\n     * for readability\n     *\n     * @param input\n     */\n    determineDecimals (input = '') {\n        const parts = input.replace('%', '').split('.')\n\n        if (parts[1]) {\n            this.props.decimals = Math.min(parts[1].length, 2);\n        } else {\n            this.props.decimals = 0;\n        }\n    }\n\n    /**\n     * Calc the user's given factor\n     *\n     * @param input\n     * @returns {number}\n     */\n    factorMulti (input) {\n        return parseFloat(input) * parseFloat(this.props.factor || 1);\n    }\n\n    /**\n     * Calc the user's given factor\n     *\n     * @param input\n     * @returns {number}\n     */\n    factorDiv (input) {\n        return parseFloat(input) / parseFloat(this.props.factor || 1);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./formatters/percentage.js","/**\n * Thousand separated formatter\n */\nexport default class {\n\n    /**\n     * Constructor\n     *\n     * @param props\n     */\n    constructor (props) {\n        this.props = props;\n    }\n\n    /**\n     * Return properties specific for this formatter\n     *\n     * @returns {}\n     */\n    getProps () {\n        return {\n\n        }\n    }\n\n    /**\n     * Format string\n     *\n     * @param input\n     * @returns {string}\n     */\n    format (input = '') {\n        let parts = input.split('.');\n        parts[0] = parts[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, ',');\n\n        return parts.join('.');\n    }\n\n    /**\n     * Deformat formatted text back to computer readable\n     *\n     * @param input\n     * @returns {string}\n     */\n    deFormat (input = '') {\n        const format = /(^([0-9]|,)+(\\.?[0-9]{0,2})?)/g,\n            parts = input.match(format);\n\n        return (parts && parts.join('') || '').replace(/,/g, '');\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./formatters/thousand-separated.js","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}